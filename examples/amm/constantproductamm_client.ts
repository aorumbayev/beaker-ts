import algosdk from "algosdk";
import * as bkr from "../../src/";
export class ConstantProductAMM extends bkr.ApplicationClient {
    desc: string = "";
    override appSchema: bkr.Schema = { declared: { asset_a: { type: bkr.AVMType.uint64, key: "a", desc: "", static: false }, asset_b: { type: bkr.AVMType.uint64, key: "b", desc: "", static: false }, governor: { type: bkr.AVMType.bytes, key: "g", desc: "", static: false }, pool_token: { type: bkr.AVMType.uint64, key: "p", desc: "", static: false }, ratio: { type: bkr.AVMType.uint64, key: "r", desc: "", static: false } }, reserved: {} };
    override acctSchema: bkr.Schema = { declared: {}, reserved: {} };
    override approvalProgram: string = "";
    override clearProgram: string = "I3ByYWdtYSB2ZXJzaW9uIDcKcHVzaGludCAwIC8vIDAKcmV0dXJu";
    override methods: algosdk.ABIMethod[] = [
        new algosdk.ABIMethod({ name: "bootstrap", desc: "", args: [{ type: "pay", name: "seed", desc: "" }, { type: "asset", name: "a_asset", desc: "" }, { type: "asset", name: "b_asset", desc: "" }], returns: { type: "uint64", desc: "" } }),
        new algosdk.ABIMethod({ name: "burn", desc: "", args: [{ type: "axfer", name: "pool_xfer", desc: "" }, { type: "asset", name: "pool_asset", desc: "" }, { type: "asset", name: "a_asset", desc: "" }, { type: "asset", name: "b_asset", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "mint", desc: "", args: [{ type: "axfer", name: "a_xfer", desc: "" }, { type: "axfer", name: "b_xfer", desc: "" }, { type: "asset", name: "pool_asset", desc: "" }, { type: "asset", name: "a_asset", desc: "" }, { type: "asset", name: "b_asset", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "set_governor", desc: "", args: [{ type: "account", name: "new_governor", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "swap", desc: "", args: [{ type: "axfer", name: "swap_xfer", desc: "" }, { type: "asset", name: "a_asset", desc: "" }, { type: "asset", name: "b_asset", desc: "" }], returns: { type: "void", desc: "" } })
    ];
    async bootstrap(args: {
        seed: algosdk.TransactionWithSigner | algosdk.Transaction;
        a_asset: bigint;
        b_asset: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<bigint>> {
        const result = await this.execute(await this.compose.bootstrap({ seed: args.seed, a_asset: args.a_asset, b_asset: args.b_asset }, txnParams));
        return new bkr.ABIResult<bigint>(result, result.returnValue as bigint);
    }
    async burn(args: {
        pool_xfer: algosdk.TransactionWithSigner | algosdk.Transaction;
        pool_asset?: bigint;
        a_asset?: bigint;
        b_asset?: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.burn({ pool_xfer: args.pool_xfer, pool_asset: args.pool_asset === undefined ? await this._resolve("global-state", "p") as bigint : args.pool_asset, a_asset: args.a_asset === undefined ? await this._resolve("global-state", "a") as bigint : args.a_asset, b_asset: args.b_asset === undefined ? await this._resolve("global-state", "b") as bigint : args.b_asset }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async mint(args: {
        a_xfer: algosdk.TransactionWithSigner | algosdk.Transaction;
        b_xfer: algosdk.TransactionWithSigner | algosdk.Transaction;
        pool_asset?: bigint;
        a_asset?: bigint;
        b_asset?: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.mint({ a_xfer: args.a_xfer, b_xfer: args.b_xfer, pool_asset: args.pool_asset === undefined ? await this._resolve("global-state", "p") as bigint : args.pool_asset, a_asset: args.a_asset === undefined ? await this._resolve("global-state", "a") as bigint : args.a_asset, b_asset: args.b_asset === undefined ? await this._resolve("global-state", "b") as bigint : args.b_asset }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async set_governor(args: {
        new_governor: string;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.set_governor({ new_governor: args.new_governor }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    async swap(args: {
        swap_xfer: algosdk.TransactionWithSigner | algosdk.Transaction;
        a_asset?: bigint;
        b_asset?: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.execute(await this.compose.swap({ swap_xfer: args.swap_xfer, a_asset: args.a_asset === undefined ? await this._resolve("global-state", "a") as bigint : args.a_asset, b_asset: args.b_asset === undefined ? await this._resolve("global-state", "b") as bigint : args.b_asset }, txnParams));
        return new bkr.ABIResult<void>(result);
    }
    compose = {
        bootstrap: async (args: {
            seed: algosdk.TransactionWithSigner | algosdk.Transaction;
            a_asset: bigint;
            b_asset: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "bootstrap"), { seed: args.seed, a_asset: args.a_asset, b_asset: args.b_asset }, txnParams, atc);
        },
        burn: async (args: {
            pool_xfer: algosdk.TransactionWithSigner | algosdk.Transaction;
            pool_asset?: bigint;
            a_asset?: bigint;
            b_asset?: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "burn"), { pool_xfer: args.pool_xfer, pool_asset: args.pool_asset === undefined ? await this._resolve("global-state", "p") : args.pool_asset, a_asset: args.a_asset === undefined ? await this._resolve("global-state", "a") : args.a_asset, b_asset: args.b_asset === undefined ? await this._resolve("global-state", "b") : args.b_asset }, txnParams, atc);
        },
        mint: async (args: {
            a_xfer: algosdk.TransactionWithSigner | algosdk.Transaction;
            b_xfer: algosdk.TransactionWithSigner | algosdk.Transaction;
            pool_asset?: bigint;
            a_asset?: bigint;
            b_asset?: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "mint"), { a_xfer: args.a_xfer, b_xfer: args.b_xfer, pool_asset: args.pool_asset === undefined ? await this._resolve("global-state", "p") : args.pool_asset, a_asset: args.a_asset === undefined ? await this._resolve("global-state", "a") : args.a_asset, b_asset: args.b_asset === undefined ? await this._resolve("global-state", "b") : args.b_asset }, txnParams, atc);
        },
        set_governor: async (args: {
            new_governor: string;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "set_governor"), { new_governor: args.new_governor }, txnParams, atc);
        },
        swap: async (args: {
            swap_xfer: algosdk.TransactionWithSigner | algosdk.Transaction;
            a_asset?: bigint;
            b_asset?: bigint;
        }, txnParams?: bkr.TransactionOverrides, atc?: algosdk.AtomicTransactionComposer): Promise<algosdk.AtomicTransactionComposer> => {
            return this.addMethodCall(algosdk.getMethodByName(this.methods, "swap"), { swap_xfer: args.swap_xfer, a_asset: args.a_asset === undefined ? await this._resolve("global-state", "a") : args.a_asset, b_asset: args.b_asset === undefined ? await this._resolve("global-state", "b") : args.b_asset }, txnParams, atc);
        }
    };
}
